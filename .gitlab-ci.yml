image: "rust:latest"

stages:
    - test
    - build
    - release
    - docker
    - deploy

test:cargo:check:
    stage: test
    script:
        - cargo check

test:fmt:
    stage: test
    script:
        - rustup component add rustfmt --toolchain 1.36.0-x86_64-unknown-linux-gnu
        - rustfmt --check src/*.rs

build:cargo:
    stage: build
    script:
        - rustc --version && cargo --version
        - cargo build

release:cargo:
    stage: release
    script:
        - cargo build --release
        - strip target/release/papyrus
    artifacts:
        paths:
            - target/release/papyrus
    only:
        - master

docker:publish:
    stage: docker
    image: "docker:stable"
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
    services:
        - "docker:dind"
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
        - docker build -t x0rz3q/papyrus:latest .
        - docker push x0rz3q/papyrus:latest
    only:
        - master

deploy_prod:
    stage: deploy
    environment:
        name: production
    script:
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
        - ssh deploy@$DEPLOY_HOST mkdir papyrus
        - scp docker-compose.yml deploy@$DEPLOY_HOST:~/papyrus
        - ssh deploy@$DEPLOY_HOST cd papyrus; docker-compose pull && docker-compuse up -d
        - ssh deploy@$DEPLOY_HOST rm -rf ~/papyrus
    only:
        - master
    when: manual
